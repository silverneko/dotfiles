" NOTE: {visual}K to lookup selected text in :help, see :h v_K

" let g:ale_completion_enabled = 1
" let g:ale_hover_cursor = 1
" let g:ale_set_balloons = 1
" let g:ale_floating_preview = 1

" :PlugInstall
call plug#begin('~/.vim/plugged')

Plug 'lifepillar/vim-colortemplate'
Plug 'silverneko/tachyon.vim'
Plug 'itchyny/lightline.vim'

Plug 'junegunn/fzf', #{ dir: '~/.fzf', do: { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'mhinz/vim-startify'
Plug 'mhinz/vim-signify'
Plug 'kshenoy/vim-signature'
Plug 'andymass/vim-matchup'
Plug 'justinmk/vim-sneak'
Plug 'justinmk/vim-dirvish'
Plug 'bfrg/vim-c-cpp-modern'
"Plug 'fidian/hexmode'
Plug 'ryanoasis/vim-devicons'

Plug 'tpope/vim-endwise'
" Plug 'tpope/vim-commentary'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-sleuth'
Plug 'tpope/vim-surround'

Plug 'girishji/vimsuggest'
Plug 'girishji/vimcomplete'
Plug 'yegappan/lsp'
"Plug 'dense-analysis/ale'

Plug 'google/vim-maktaba'
Plug 'google/vim-glaive'
Plug 'google/vim-codefmt'

call plug#end()

call glaive#Install()

let g:google_vimrc=expand('~/.dotfiles/vimrc.google')
if filereadable(g:google_vimrc)
  exec 'source' g:google_vimrc
endif

packadd! comment

syntax enable
filetype plugin indent on

if &cp | set nocompatible | endif
set nomodeline noerrorbells
set ruler signcolumn=yes number numberwidth=5
set incsearch hlsearch
set ignorecase smartcase
set encoding=utf-8
set hidden

set splitbelow
set scrolloff=5
set sidescroll=1
set sidescrolloff=5
set display+=lastline

set history=2000
set sessionoptions-=options
set viewoptions-=options
" Persist g:UPPERCASE variables, used by some plugins, in .viminfo.
" Bookkeep 500 :oldfiles
set viminfo=!,'500,<50,s10,h
" vim -p <FILES...> / vim <FILES...> && :tab all
set tabpagemax=20
" Disable a legacy behavior that can break plugin maps. (???)
set nolangremap

set mouse=nv
set guifont=DejaVu\ Sans\ Mono\ 14
set guicursor+=a:blinkon0

set backspace=indent,eol,start
set list listchars=trail:␣,tab:»\ ,nbsp:¬

set noshowmode
set showcmd
set cmdheight=1
set laststatus=2
" Show search count like "[1/5]"
set shortmess-=S
" Don't show completion messages like "match 1 of 2"
set shortmess+=c

" Tab things
set tabstop=8        "A tab is 8 spaces
set expandtab        "Always uses spaces instead of tabs
set softtabstop=2    "Insert 2 spaces when tab is pressed
set shiftwidth=2     "An indent is 2 spaces
set shiftround       "Round indent to nearest shiftwidth multiple

set autoindent
" Set a few indentation parameters. See the VIM help for cinoptions-values for
" details.  These aren't absolute rules; they're just an approximation of
" common style in LLVM source.
set cinoptions=:0,g0,(0,Ws,l1
" Vim tend to a have issues with flagging braces as errors, see for example
" https://github.com/vim-jp/vim-cpp/issues/16. A workaround is to set:
let c_no_curly_error = 1

augroup CustomFileTypeCommands | autocmd!
  autocmd BufNewFile,BufRead ghostty.config setfiletype ghostty
  autocmd BufNewFile,BufRead *.aidl,*.hidl setfiletype java
  autocmd BufNewFile,BufRead *.bp set filetype=javascript softtabstop=4 shiftwidth=4
  autocmd FileType go set noexpandtab tabstop=2
  autocmd FileType make set noexpandtab preserveindent
  autocmd FileType man setlocal signcolumn=no | nnoremap <buffer><silent> q :q<CR>
  autocmd FileType rust setlocal textwidth=100  " Why would the default be 99?
  autocmd FileType lspgfm setlocal nonumber signcolumn=no
augroup END

" :help persistent-undo
let undo_dir='/tmp/vim_undo'
if !isdirectory(undo_dir)
  call mkdir(undo_dir, 'p')
endif
let &undodir=undo_dir
set undofile

" Reduce <Esc> timeout. Reduce insert mode enter / leave lag.
set ttimeout
augroup NoInsertKeycodes | autocmd!
  autocmd InsertEnter * set ttimeoutlen=0
  autocmd InsertLeave * set ttimeoutlen=100 "<--- default value; also try 100 or something
augroup END

" j: Delete comment character when joining commented lines.
" o: Insert comment leader when 'o' / 'O' in Normal mode.
augroup SetFormatOptions | autocmd!
  autocmd BufNewFile,BufRead * setlocal formatoptions-=o formatoptions+=j
augroup END

" :help restore-cursor
augroup RestoreCursor | autocmd!
  autocmd BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal g'\"" | endif
  " Center the cursor
  autocmd BufWinEnter * normal zz
augroup END

" Hide cursorline on FocusLost; Show cursorline on FocusGained
augroup FocusedCursorline | autocmd!
  autocmd BufNewFile,BufRead,FocusGained * set cursorline
  autocmd FocusLost * set nocursorline
augroup END

augroup HighlightedYank | autocmd!
  autocmd TextYankPost * call highlightedyank#HighlightedYank('Visual', 300, v:false)
augroup END

augroup DrawColorcolumn | autocmd!
  autocmd OptionSet textwidth call s:SetColorcolumn()
  autocmd BufNewFile,BufRead,BufEnter,FileType * call s:SetColorcolumn()
augroup END
function! s:SetColorcolumn()
  let cc_nil = ['man', 'lspgfm', 'startify', 'help', 'dirvish']
  let cc_val = #{go: '100'}->get(&filetype, '')
  if !cc_val->empty()
    exec 'setlocal colorcolumn=' .. cc_val
  elseif cc_nil->index(&filetype) != -1
    setlocal colorcolumn=
  elseif &textwidth != 0
    " +/-[n] means relative to textwidth
    setlocal colorcolumn=+0
  else
    setlocal colorcolumn=80
  endif
endfunction

" Disable netrw. Use FZF & dirvish to find files.
let g:loaded_netrwPlugin = 1

" vim-matchup replaces matchit.vim
let g:loaded_matchit = 1
let g:matchup_matchparen_offscreen = {}

" :help signify.txt
let g:signify_number_highlight = 1
" Eagerly update git status
set updatetime=300
augroup ShowHunkAfterJump | autocmd! | autocmd User SignifyHunk call s:ShowCurrentHunk() | augroup END
function! s:ShowCurrentHunk() abort
  let h = sy#util#get_hunk_stats()
  if !empty(h)
    " Prevents status line flickering :h :echo-redraw
    redraw | echo printf('[Hunk %d/%d]', h.current_hunk, h.total_hunks)
    SignifyHunkDiff
  endif
endfunction

" Use CTRL-L to clear the highlighting of 'hlsearch' (off by default) and call :diffupdate.
nnoremap <silent> <C-L> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>
augroup InsertModeNoh | autocmd!
  " Convoluted because :noh doesn't work in autocmd, see :h autocmd-searchpat
  autocmd InsertEnter * call feedkeys("\<Cmd>nohlsearch\<CR>", 'n')
augroup END

" vim-signature
" m[0-9] -> Place markers
" ???, ]=, ]- -> Navigate markers

" Single character *sneak*. `;` => next sneak, `,` => previous sneak.
let g:sneak#use_ic_scs = 1  " Respect smartcase & ignorecase
map f <Plug>Sneak_f
map F <Plug>Sneak_F
map t <Plug>Sneak_t
map T <Plug>Sneak_T

" Shortcuts
" Comment to the rest of line
nnoremap <silent> <expr> gC comment#Toggle() .. '$'
" CTRL-P to find pathname
nnoremap <C-P> <ScriptCmd>call ctrlp#CtrlP()<CR>
" CTRL-B to find buffer
nnoremap <C-B> <ScriptCmd>Buffers<CR>
" Better ergonomics. Mnemonic: Edit alternate buffer.
nnoremap <C-E> <C-6>
" :MRU to fuzzy search :oldfiles
cnoreabbrev <expr> MRU ((getcmdtype() is# ':' && getcmdline() is# 'MRU') ? 'History' : 'MRU')

" Tab navigations
nnoremap <silent> ]t :tabnext<CR>
nnoremap <silent> [t :tabprevious<CR>
nnoremap <silent> ]T :tablast<CR>
nnoremap <silent> [T :tabfirst<CR>
nnoremap <silent> <A-Right> :<C-U>execute 'tabmove +' .. v:count1<CR>
nnoremap <silent> <A-Left> :<C-U>execute 'tabmove -' .. v:count1<CR>

" http://vim.wikia.com/wiki/Recover_from_accidental_Ctrl-U
inoremap <C-U> <C-G>u<C-U>
inoremap <C-W> <C-G>u<C-W>

" CTRL-C in visual mode to fast copy to system clipboard.
vnoremap <C-C> "+y

" Change directory to current file directory.
command CD cd %:p:h
command LCD lcd %:p:h

" :help startify.txt
let g:startify_custom_header = ''
let g:startify_change_to_dir = 0
let g:startify_change_to_vcs_root = 1
let g:startify_skiplist = ['COMMIT_EDITMSG', '.repo/', '.cargo/', '.rustup/']
let g:startify_lists = [
      \ #{type: 'files', header: ['   MRU'], indices: '1234567890'->split('\zs')},
      \ #{type: 'dir',   header: ['   MRU '. getcwd()->fnamemodify(':~')],
      \   indices: '1234567890'->split('\zs')->map('"d" .. v:val')},
      \ ]
augroup StartifiedCursorline | autocmd! | autocmd User Startified setlocal cursorline | augroup END

" :help vimsuggest.txt
set wildmenu
set wildmode=longest:full,full
set wildoptions=pum,fuzzy
augroup SetVimSuggestOptions | autocmd!
  autocmd VimEnter * call g:VimSuggestSetOptions(#{
        \ cmd: #{reverse: v:true, addons: v:false, popupattrs: #{maxheight: 12}},
        \ search: #{reverse: v:true},
        \ })
augroup END

" Java format style
Glaive codefmt google_java_executable="google-java-format --aosp"

" Colorscheme
set t_Co=256
set termguicolors
set background=dark
colorscheme tachyon

" :help tmux-integration
if !has('gui_running') && &term =~ '^\(screen\|tmux\|xterm\)'
  " Insert / replace / normal = vertical bar / underline / block, :help termcap-cursor-shape
  let &t_SI = "\e[6 q"
  let &t_SR = "\e[4 q"
  let &t_EI = "\e[2 q"

  " Better mouse support, see  :help 'ttymouse'
  set ttymouse=sgr

  " Enable true colors, see  :help xterm-true-color
  set termguicolors
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"

  " Enable bracketed paste mode, see  :help xterm-bracketed-paste
  let &t_BE = "\<Esc>[?2004h"
  let &t_BD = "\<Esc>[?2004l"
  let &t_PS = "\<Esc>[200~"
  let &t_PE = "\<Esc>[201~"

  " Enable focus event tracking, see  :help xterm-focus-event
  let &t_fe = "\<Esc>[?1004h"
  let &t_fd = "\<Esc>[?1004l"
  execute "set <FocusGained>=\<Esc>[I"
  execute "set <FocusLost>=\<Esc>[O"

  " Enable modified arrow keys, see  :help arrow_modifiers
  execute "silent! set <xUp>=\<Esc>[@;*A"
  execute "silent! set <xDown>=\<Esc>[@;*B"
  execute "silent! set <xRight>=\<Esc>[@;*C"
  execute "silent! set <xLeft>=\<Esc>[@;*D"
endif
